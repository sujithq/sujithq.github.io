name: AI triage failed runs

on:
  workflow_run:
    workflows: ["Deploy to Github Pages", "Copilot Setup Steps", "build", "test", "ci"]
    types: [completed]

permissions:
  actions: read
  contents: read
  issues: write
  models: read

jobs:
  triage:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Set vars
        id: vars
        run: |
          echo "run_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
          echo "run_url=${{ github.event.workflow_run.html_url }}" >> $GITHUB_OUTPUT
          echo "repo=${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "branch=${{ github.event.workflow_run.head_branch }}" >> $GITHUB_OUTPUT
          echo "sha=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
      - name: Download logs (zip)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p logs
          curl -sSL -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ steps.vars.outputs.run_id }}/logs" \
            -o logs/run-logs.zip
          unzip -q logs/run-logs.zip -d logs
      - name: Download artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p artifacts
          gh run download ${{ steps.vars.outputs.run_id }} --repo "${{ github.repository }}" --dir artifacts || echo "No artifacts"
          find artifacts -maxdepth 2 -type f | sed 's/^/- /' > artifacts_index.md || true
      - name: Build AI prompt
        id: prompt
        run: |
          echo "Failure in ${{ steps.vars.outputs.repo }} on branch ${{ steps.vars.outputs.branch }} at ${{ steps.vars.outputs.sha }}" > prompt.txt
          echo "Run: ${{ steps.vars.outputs.run_url }}" >> prompt.txt
          printf "\nGoal: Summarise failure cause and propose next steps. Keep it short.\n" >> prompt.txt
          printf "\nArtifacts (if any):\n" >> prompt.txt
          cat artifacts_index.md >> prompt.txt || true
          printf "\nLogs (head):\n" >> prompt.txt
          mapfile -t LOG_FILES < <(find logs -maxdepth 2 -type f | head -n 3)
          if [ ${#LOG_FILES[@]} -eq 0 ]; then echo "(no log files found under logs/)" >> prompt.txt; fi
          for f in "${LOG_FILES[@]}"; do
            echo "--- $f ---" >> prompt.txt
            head -n 60 "$f" >> prompt.txt || true
          done
          printf "\nLogs (tail):\n" >> prompt.txt
          for f in "${LOG_FILES[@]}"; do
            echo "--- $f ---" >> prompt.txt
            tail -n 60 "$f" >> prompt.txt || true
          done
      - name: Call GitHub Models (chat completions)
        id: ai
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          primary_model="openai/gpt-4o"
          fallback_model="openai/gpt-4o-mini"

          make_body() {
            jq -n \
              --arg model "$1" \
              --rawfile content prompt.txt \
              '{model: $model, messages: [{role:"system", content:"You are a senior CI engineer. Be concise."}, {role:"user", content:$content}]}'
          }

          # Try primary model first
          body=$(make_body "$primary_model")
          curl -sS https://models.github.ai/inference/chat/completions \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -d "$body" | tee response.json

          # If API returns an error field, retry once with fallback model
          if jq -e '.error' response.json >/dev/null 2>&1; then
            echo "Primary model ($primary_model) unavailable: $(jq -r '.error.message // .error.code // "unknown"' response.json)" >&2
            body=$(make_body "$fallback_model")
            curl -sS https://models.github.ai/inference/chat/completions \
              -H "Authorization: Bearer $TOKEN" \
              -H "Accept: application/json" \
              -H "Content-Type: application/json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -d "$body" | tee response.json
          fi

          jq -r '.choices[0].message.content // empty' response.json > summary.md
          if [ ! -s summary.md ]; then echo "No AI summary produced" > summary.md; fi
      - name: Ensure labels exist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh label create "ci-failure" --repo "${{ github.repository }}" --color B60205 --description "CI pipeline failure" 2>/dev/null || true
          gh label create "needs-triage" --repo "${{ github.repository }}" --color D4C5F9 --description "Requires triage" 2>/dev/null || true
      - name: Create issue
        id: issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          title="CI failure: ${{ github.event.workflow_run.name }} on ${{ steps.vars.outputs.branch }}"
          body=$(printf "### AI summary\n\n%s\n\n---\n\nRun: %s\nCommit: %s\n\n> Prompt (truncated)\n\n\n" "$(cat summary.md)" "${{ steps.vars.outputs.run_url }}" "${{ steps.vars.outputs.sha }}")
          payload=$(jq -n --arg title "$title" --arg body "$body" '{title:$title, body:$body, labels:["ci-failure","needs-triage"]}')
          number=$(echo "$payload" | gh api -X POST "repos/${{ github.repository }}/issues" --input - --jq '.number')
          echo "number=$number" >> "$GITHUB_OUTPUT"
      - name: Optionally assign to Copilot coding agent
        if: ${{ true }} # set to true when Copilot coding agent is available
        env:
          GH_TOKEN: ${{ secrets.PAT_WITH_ISSUES_WRITE != '' && secrets.PAT_WITH_ISSUES_WRITE || secrets.GITHUB_TOKEN }}
          COPILOT_ACTOR: ${{ vars.COPILOT_ACTOR || secrets.COPILOT_ACTOR || '' }}
        run: |
          issue_number='${{ steps.issue.outputs.number }}'
          if [ -z "$COPILOT_ACTOR" ]; then
            echo "COPILOT_ACTOR not set; skipping assignment."; exit 0;
          fi
          if [ -n "$issue_number" ]; then
            gh issue edit "$issue_number" --repo "${{ github.repository }}" --add-assignee "$COPILOT_ACTOR" || true
          else
            echo "No issue number available for assignment"
          fi
