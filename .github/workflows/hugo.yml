name: Deploy to Github Pages

on:
  schedule:
    - cron: '15 * * * *'
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_run:
    workflows: ["Updates (Daily Refresh)", "Publish due posts"]
    types: [completed]
  workflow_dispatch:

env:
  DOTNET_VERSION: '10.0.x'   # <= set once; eg '9.0.x' or '10.0.x'

jobs:
  build:
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Cache Hugo resources
        uses: actions/cache@v4
        env:
          cache-name: cache-hugo-resources
        with:
          path: resources
          key: ${{ env.cache-name }}

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "^1.23.3"

      - name: Check Go version
        run: go version

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: "20"
          cache: "npm"

      - name: Install npm dependencies
        run: |
          $PSVersionTable
          npm install
        shell: pwsh

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: "0.148.2"
          extended: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Compute .NET TFM and OUTDIR
        id: tfm
        shell: bash
        run: |
          # From DOTNET_VERSION like "10.0.x" -> "10.0"
          VER="${DOTNET_VERSION%.x}"
          echo "VER=$VER"
          TFM="net${VER}"
          echo "DOTNET_TFM=$TFM" >> "$GITHUB_ENV"
          echo "OUTDIR=src/Crawler/bin/Release/$TFM" >> "$GITHUB_ENV"

      - name: Restore
        run: dotnet restore src/Crawler/Crawler.csproj

      - name: Build
        run: dotnet build src/Crawler/Crawler.csproj -c Release --no-restore

      - name: Run crawler and sync artifacts
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODELS_TOKEN: ${{ secrets.MODELS_TOKEN }}
          FOUNDRY_API_KEY: ${{ secrets.FOUNDRY_API_KEY }}
        shell: bash
        run: |
          set -Eeuo pipefail
          set -x

          echo "DOTNET_TFM=${DOTNET_TFM}"
          echo "OUTDIR=${OUTDIR}"

          # Publish to a clean OUTDIR so working dir + outputs are deterministic
          rm -rf "${OUTDIR}"
          dotnet publish src/Crawler/Crawler.csproj -c Release -o "${OUTDIR}"

          echo "::group::Published OUTDIR contents"
          ls -la "${OUTDIR}"
          echo "::endgroup::"

          # Run the app from OUTDIR so it writes to OUTDIR/data and OUTDIR/state
          pushd "${OUTDIR}"
          if [ -f "./Crawler" ]; then
            ./Crawler
          else
            dotnet Crawler.dll
          fi
          popd

          echo "::group::OUTDIR tree after run"
          ls -laR "${OUTDIR}" || true
          echo "::endgroup::"

          # Copy data/state back to repo root with clear logs
          mkdir -p data state
          for d in data state; do
            if [ -d "${OUTDIR}/${d}" ]; then
              echo "Syncing ${OUTDIR}/${d} -> ./${d}"
              rsync -av "${OUTDIR}/${d}/" "./${d}/"
            else
              echo "No ${d} to copy from ${OUTDIR}"
            fi
          done

          echo "::group::Repo data/ tree"
          ls -laR data || true
          echo "::endgroup::"
          echo "::group::Repo state/ tree"
          ls -laR state || true
          echo "::endgroup::"


      - name: Build Update pages
        run: node scripts/sync-updates-from-jsonl.js

      - name: Build
        if: always()
        run: hugo --minify --gc --environment production

      - name: Commit & push results
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin main
          git pull --rebase --autostash origin main || true
          git add data/ content/ state/
          if git diff --staged --quiet; then
            echo "No changes."
            exit 0
          fi
          git commit -m "chore: update crawl outputs [skip ci]"
          if git push; then
            echo "Pushed successfully."
          else
            echo "Push rejected, attempting rebase and retry..."
            git fetch origin main
            if git rebase origin/main; then
              git push || git push --force-with-lease
            else
              echo "Rebase had conflicts; aborting and using --force-with-lease to publish bot outputs."
              git rebase --abort || true
              git push --force-with-lease
            fi
          fi

      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: public
          clean: true
          single-commit: true
