<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloud on Sujith Quintelier</title><link>https://quintelier.dev/categories/cloud/</link><description>Recent content in Cloud on Sujith Quintelier</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 23 Sep 2025 06:00:00 +0000</lastBuildDate><atom:link href="https://quintelier.dev/categories/cloud/index.xml" rel="self" type="application/rss+xml"/><item><title>ü§ñ When to Use GitHub Models, Azure AI Foundry, and OpenAI</title><link>https://quintelier.dev/posts/2025/09/when-to-use-github-models-azure-ai-foundry-openai/</link><pubDate>Tue, 23 Sep 2025 06:00:00 +0000</pubDate><guid>https://quintelier.dev/posts/2025/09/when-to-use-github-models-azure-ai-foundry-openai/</guid><description>&lt;h2 id="-when-to-use-github-models-azure-ai-foundry-and-openai">ü§ñ When to Use GitHub Models, Azure AI Foundry, and OpenAI&lt;/h2>
&lt;p>Artificial intelligence is moving fast, and so are the platforms that deliver it.&lt;br>
For many teams, the question isn‚Äôt &lt;em>‚ÄúCan we use AI?‚Äù&lt;/em> but &lt;em>‚ÄúWhere should we use it from?‚Äù&lt;/em>&lt;/p>
&lt;p>Between &lt;strong>GitHub Models&lt;/strong>, &lt;strong>Azure AI Foundry&lt;/strong>, and &lt;strong>OpenAI&lt;/strong>, developers and enterprises alike face an abundance of choice. The reality is that there is no single ‚Äúbest‚Äù option ‚Äî the right one depends on your perspective and your stage in the AI journey.&lt;/p></description></item><item><title>üñ•Ô∏è Zero to Hero: Terraform for Azure‚Ä¢Part 2</title><link>https://quintelier.dev/posts/2025/08/zero-to-hero-terraform-for-azure-2/</link><pubDate>Wed, 06 Aug 2025 06:00:00 +0000</pubDate><guid>https://quintelier.dev/posts/2025/08/zero-to-hero-terraform-for-azure-2/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In &lt;a href="../../03/zero-to-hero-terraform-for-azure-1/">Part 1&lt;/a>, we set up our development environment and deployed our first Azure resource group using Terraform. Whilst this gave us a taste of Infrastructure as Code, we were using local state files: a practice that won&amp;rsquo;t scale for team environments or production workloads.&lt;/p>
&lt;p>In this second part of our series, we&amp;rsquo;ll explore &lt;strong>Terraform state management&lt;/strong> and &lt;strong>remote backends&lt;/strong>. You&amp;rsquo;ll learn why state is crucial, how to configure Azure Storage as a remote backend, implement state locking for team safety, and master essential state management commands.&lt;/p></description></item><item><title>üñ•Ô∏è Zero to Hero: Terraform for Azure‚Ä¢Part 1</title><link>https://quintelier.dev/posts/2025/03/zero-to-hero-terraform-for-azure-1/</link><pubDate>Mon, 10 Mar 2025 06:00:00 +0000</pubDate><guid>https://quintelier.dev/posts/2025/03/zero-to-hero-terraform-for-azure-1/</guid><description>&lt;h2 id="introduction">&lt;strong>Introduction&lt;/strong>&lt;/h2>
&lt;p>Terraform is a powerful Infrastructure as Code (IaC) tool that enables you to define, provision, and manage Azure resources using declarative configuration files. This blog series, &lt;em>Zero to Hero: Terraform for Azure&lt;/em>, will take you through Terraform from the basics to advanced topics, using hands-on examples tailored for Azure.&lt;/p>
&lt;p>In this first post, we‚Äôll focus on setting up your development environment and deploying your first resource on Azure using Terraform.&lt;/p></description></item></channel></rss>