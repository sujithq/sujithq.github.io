<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Feature-Gate on Sujith Quintelier</title><link>https://quintelier.dev/update_tags/feature-gate/</link><description>Recent content in Feature-Gate on Sujith Quintelier</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 22 Sep 2025 18:30:00 +0000</lastBuildDate><atom:link href="https://quintelier.dev/update_tags/feature-gate/index.xml" rel="self" type="application/rss+xml"/><item><title>k8s: Kubernetes v1.34: Pod Level Resources Graduated to Beta</title><link>https://quintelier.dev/updates/kubernetes-v1-34-pod-level-resources-graduated-to-beta/</link><pubDate>Mon, 22 Sep 2025 18:30:00 +0000</pubDate><guid>https://quintelier.dev/updates/kubernetes-v1-34-pod-level-resources-graduated-to-beta/</guid><description>&lt;p>Kubernetes v1.34 graduates Pod Level Resources to Beta and enables it by default. The feature lets you declare CPU, memory and hugepages for an entire Pod (in addition to per-container settings), with pod-level requests used for scheduling and pod-level limits acting as an absolute runtime cap; it improves intra-pod sharing and QoS handling but has several platform and feature limitations.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Source:&lt;/strong> &lt;a href="https://kubernetes.io/blog/2025/09/22/kubernetes-v1-34-pod-level-resources/" target="_blank" rel="noopener noreferrer">Kubernetes Official Blog&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>k8s: Kubernetes v1.34: DRA Consumable Capacity</title><link>https://quintelier.dev/updates/kubernetes-v1-34-dra-consumable-capacity/</link><pubDate>Thu, 18 Sep 2025 18:30:00 +0000</pubDate><guid>https://quintelier.dev/updates/kubernetes-v1-34-dra-consumable-capacity/</guid><description>&lt;p>Kubernetes v1.34 introduces the alpha feature DRAConsumableCapacity for Dynamic Resource Allocation (DRA). It enables finer-grained, consumable device capacity so multiple ResourceClaims or DeviceRequests (even across namespaces) can share portions of a device. The scheduler enforces total consumable capacity, drivers can opt into multiple allocations and define request policies, and a ShareID in allocation status distinguishes individual shared slices. The feature requires enabling a feature gate on control plane and kubelet components and complements other DRA improvements like partitionable devices and device status.&lt;/p></description></item></channel></rss>