[{"authors":["sujith"],"categories":null,"content":"Sujith brings more then 22 years of IT experience, combined with excellent communication and presentation skills. He is an efficient, analytical, positive thinking professional who has successfully demonstrated the ability of understanding business requirements, specifying systems, developing working software and designing Azure solutions.\nAs a certified Azure Solutions Architect he demonstrates skills and knowledge to advise stakeholders and translate business requirements into secure, scalable, and reliable solutions. He has advanced experience and knowledge across various aspects of IT operations, including networking, virtualization, identity, security, business continuity, disaster recovery, data management, budgeting, and governance. He also understands how managing decisions in each area affect an overall solution.\nAs a certified DevOps Engineer he demonstrates the ability to combine people, process, and technologies to continuously deliver valuable products and services that meet end user needs and business objectives. DevOps professionals streamline delivery by optimizing practices, improving communications and collaboration, and creating automation.\nAs a certified Azure Cosmos DB Developer he shows subject matter expertise designing, implementing, and monitoring cloud-native applications that store and manage data. His responsibilities include designing and implementing data models and data distribution, loading data into an Azure Cosmos DB database, and optimizing and maintaining the solution. This professional integrates the solution with other Azure services. He also designs, implements, and monitors solutions that consider security, availability, resilience, and performance requirements. He has solid knowledge and experience developing apps for Azure and working with Azure Cosmos DB database technologies. He should be proficient at developing applications by using the Core (SQL) API and SDKs, writing efficient queries and creating appropriate index policies, provisioning and managing resources in Azure, and creating server-side objects with JavaScript. He should be able to interpret JSON, read C# or Java code, and use PowerShell.\nAs a certified Azure AI Engineer Associate he validates the skills and knowledge to use Cognitive Services, Machine Learning, and Knowledge Mining to architect and implement Microsoft AI solutions involving natural language processing, speech, computer vision, bots, and agents.\nAs a certfified Azure Administrator certification he validates the skills and knowledge to implement, manage, and monitor an organizationâ€™s Microsoft Azure environment. Candidates have a deep understanding of each implementing, managing, and monitoring identity, governance, storage, compute, and virtual networks in a cloud environment, plus provision, size, monitor, and adjust resources, when needed.\nAs a certified Azure Security Engineer he demonstrates the skills and knowledge to implement security controls and threat protection, manage identity and access, and protect data, applications, and networks in cloud and hybrid environments as part of end-to-end infrastructure.\nAs a certified Azure Developer he demonstrates the skills and knowledge to design, build, test, and maintain cloud applications and services on Microsoft Azure. Candidates participate in all phases of cloud development from requirements definition and design, to development, deployment, and maintenance.\nAs lead developer, he has carried the full weight of software development in medium-sized software firms in the past few years. As such he is guiding other developers, streamlining development, defining standards, organizing code reviews, exploring new technologies, etc. Having worked on the same products for several years, he has developed a deeper understanding of the evolution of software.\nHe is an excellent team player, capable of working under pressure and without supervision. He is well organized, self-motivated, and has demonstrated important skills in dealing with issues and resolving them prior to becoming problems. He is an easy learning person used to acquire new knowledge about customer systems, standards, tools and trends. He is eager to learn new technologies and is continuously extending his knowledge.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1651227972,"objectID":"791ce964fc93756b99412afd74939435","permalink":"/authors/sujith/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/sujith/","section":"authors","summary":"Sujith brings more then 22 years of IT experience, combined with excellent communication and presentation skills. He is an efficient, analytical, positive thinking professional who has successfully demonstrated the ability of understanding business requirements, specifying systems, developing working software and designing Azure solutions.\nAs a certified Azure Solutions Architect he demonstrates skills and knowledge to advise stakeholders and translate business requirements into secure, scalable, and reliable solutions. He has advanced experience and knowledge across various aspects of IT operations, including networking, virtualization, identity, security, business continuity, disaster recovery, data management, budgeting, and governance.","tags":null,"title":"Sujith Quintelier","type":"authors"},{"authors":["Sujith Quintelier"],"categories":["Azure","Load Balancing","Networking"],"content":"The term load balancing refers to the even distribution of workloads (that is, incoming network traffic), across a group of backend computing resources or servers. Load balancing aims to optimize resource use, maximize throughput, minimize response time, and avoid overloading any single resource. It can also improve availability by sharing a workload across redundant computing resources.\nOptions  Azure Load Balancer Traffic Manager Azure Application Gateway Azure Front Door  Azure Load Balancer High-performance, ultra-low-latency Layer 4 load-balancing service (inbound and outbound) for all UDP and TCP protocols. It is built to handle millions of requests per second while ensuring your solution is highly available. Azure Load Balancer is zone-redundant, ensuring high availability across Availability Zones.\nType They can be public (aka external) or internal (aka private).\nPublic - Provide outbound connections for virtual machines (VMs) inside your virtual network. These connections are accomplished by translating their private IP addresses to public IP addresses. External load balancers are used to distribute client traffic from the internet across your VMs. That internet traffic might come from web browsers, module apps, or other sources.\nInternal - Is used where private IPs are needed at the frontend only. Internal load balancers are used to load balance traffic from internal Azure resources to other Azure resources inside a virtual network. A load balancer frontend can also be accessed from an on-premises network in a hybrid scenario.\nAvailability zones Azure Load Balancer can be either zone redundant, zonal or non-zonal.\nZone redundant - The traffic s served by a single IP address and it survives zone failure. The frontend IP may be used to reach all non-impacted backend pool members no matter the zone. One or more availability zones can fail and the data path survives as long as one zone in the region remains healthy.\nZonal - The frontend is guaranteed to a single zone. Any inbound or outbound flow is served by a single zone in a region. Your frontend shares fate with the health of the zone. The data path is unaffected by failures in zones other than where it was guaranteed. You can use zonal front-ends to expose an IP address per Availability Zone.\nAdditionally, the use of zonal front-ends directly for load balanced endpoints within each zone is supported. You can use this configuration to expose per zone load-balanced endpoints to individually monitor each zone. For public endpoints, you can integrate them with a DNS load-balancing product like Traffic Manager and use a single DNS name.\nSKU There are 2 SKUs available: Standard and basic.\n   Features Standard Load Balancer Basic Load Balancer     Backend pool size Supports up to 1000 instances. Supports up to 300 instances.   Backend pool endpoints Any virtual machines or virtual machine scale sets in a single virtual network. Virtual machines in a single availability set or virtual machine scale set.   Health probes TCP, HTTP, HTTPS TCP, HTTP   Health probe down behavior TCP connections stay alive on an instance probe down and on all probes down. TCP connections stay alive on an instance probe down. All TCP connections end when all probes are down.   Availability Zones Zone-redundant and zonal front-ends for inbound and outbound traffic. Not available   Diagnostics Azure Monitor multi-dimensional metrics Azure Monitor logs   HA Ports Available for Internal Load Balancer Not available   Secure by default Closed to inbound flows unless allowed by a network security group. Internal traffic from the virtual network to the internal load balancer is allowed. Open by default. Network security group optional.   Outbound Rules Declarative outbound NAT configuration Not available   TCP Reset on Idle Available on any rule Not available   Multiple front ends Inbound and outbound Inbound only   Management Operations Most operations \u0026lt; 30 seconds 60-90+ seconds typical   SLA 99.99% Not available    Traffic Manager DNS-based traffic load balancer that enables you to distribute traffic optimally to services across global Azure regions, while providing high availability and responsiveness. Because Traffic Manager is a DNS-based load-balancing service, it load-balances only at the domain level. For that reason, it can\u0026rsquo;t fail over as quickly as Front Door, because of common challenges around DNS caching and systems not honoring DNS time-to-live values (TTLs).\n  The client sends a DNS query to its configured recursive DNS service to resolve the name â€˜partners.contoso.comâ€™. A recursive DNS service, sometimes called a \u0026lsquo;local DNS\u0026rsquo; service, does not host DNS domains directly. Rather, the client off-loads the work of contacting the various authoritative DNS services across the Internet needed to resolve a DNS name.\n  To resolve the DNS name, the recursive DNS service finds the name servers for the â€˜contoso.comâ€™ domain. It then contacts those name servers to request the \u0026lsquo;partners.contoso.com\u0026rsquo; DNS record. The contoso.com DNS servers return the CNAME record which points to contoso.trafficmanager.net.\n  Next, the recursive DNS service finds the name servers for the â€˜trafficmanager.netâ€™ domain, which are provided by the Azure Traffic Manager service. It then sends a request for the \u0026lsquo;contoso.trafficmanager.net\u0026rsquo; DNS record to those DNS servers.\n  The Traffic Manager name servers receive the request. They choose an endpoint based on:\n   The configured state of each endpoint (disabled endpoints are not returned) The current health of each endpoint, as determined by the Traffic Manager health checks. The chosen traffic-routing method.   The chosen endpoint is returned as another DNS CNAME record. In this case, let us suppose contoso-eu.cloudapp.net is returned.\n  Next, the recursive DNS service finds the name servers for the â€˜cloudapp.netâ€™ domain. It contacts those name servers to request the \u0026lsquo;contoso-eu.cloudapp.net\u0026rsquo; DNS record. A DNS â€˜Aâ€™ record containing the IP address of the EU-based service endpoint is returned.\n  The recursive DNS service consolidates the results and returns a single DNS response to the client.\n  The client receives the DNS results and connects to the given IP address. The client connects to the application service endpoint directly, not through Traffic Manager. Since it is an HTTPS endpoint, the client performs the necessary SSL/TLS handshake, and then makes an HTTP GET request for the â€˜/login.aspxâ€™ page.\n  Routing methods    Routing method When to use     Priority Select this routing method when you want to have a primary service endpoint for all traffic. You can provide multiple backup endpoints in case the primary or one of the backup endpoints is unavailable.   Weighted Select this routing method when you want to distribute traffic across a set of endpoints based on their weight. Set the weight the same to distribute evenly across all endpoints.   Performance Select the routing method when you have endpoints in different geographic locations, and you want end users to use the \u0026ldquo;closest\u0026rdquo; endpoint for the lowest network latency.   Geographic Select this routing method to direct users to specific endpoints (Azure, External, or Nested) based on where their DNS queries originate from geographically. With this routing method, it enables you to be compliant with scenarios such as data sovereignty mandates, localization of content \u0026amp; user experience and measuring traffic from different regions.   MultiValue Select this routing method for Traffic Manager profiles that can only have IPv4/IPv6 addresses as endpoints. When a query is received for this profile, all healthy endpoints are returned.   Subnet Select this routing method to map sets of end-user IP address ranges to a specific endpoint. When a request is received, the endpoint returned will be the one mapped for that requestâ€™s source IP address.    Examples\nProfiles can be nested\nAzure Application Gateway Provides application delivery controller (ADC) as a service, offering various Layer 7 load-balancing capabilities. Use it to optimize web farm productivity by offloading CPU-intensive SSL termination to the gateway.\nAzure Front Door Application delivery network that provides global load balancing and site acceleration service for web applications. It offers Layer 7 capabilities for your application like SSL offload, path-based routing, fast failover, caching, etc. to improve performance and high-availability of your applications.\nGlobal vs regional Global load-balancing services distribute traffic across regional backends, clouds, or hybrid on-premises services. These services route end-user traffic to the closest available backend. They also react to changes in service reliability or performance, in order to maximize availability and performance. You can think of them as systems that load balance between application stamps, endpoints, or scale-units hosted across different regions/geographies.\nIn contrast, Regional load-balancing services distribute traffic within virtual networks across virtual machines (VMs) or zonal and zone-redundant service endpoints within a region. You can think of them as systems that load balance between VMs, containers, or clusters within a region in a virtual network.\nHTTP(S) vs non-HTTP(S) HTTP(S) load-balancing services are Layer 7 load balancers that only accept HTTP(S) traffic. They are intended for web applications or other HTTP(S) endpoints. They include features such as SSL offload, web application firewall, path-based load balancing, and session affinity.\nIn contrast, non-HTTP(S) load-balancing services can handle non-HTTP(S) traffic and are recommended for non-web workloads.\nSummary    Service Global/regional Recommended traffic     Azure Front Door Global HTTP(S)   Traffic Manager Global non-HTTP(S)   Application Gateway Regional HTTP(S)   Azure Load Balancer Regional non-HTTP(S)    Choosing a load balancing option ","date":1655445600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655473322,"objectID":"5a5f683293128bf1d214be48411595c7","permalink":"/post/2022-06-17-azure-load-balancing-options/","publishdate":"2022-06-17T06:00:00Z","relpermalink":"/post/2022-06-17-azure-load-balancing-options/","section":"post","summary":"Azure Load Balancing options","tags":["Azure","Load Balancing","Azure Load Balancer","Traffic Manager","Azure Application Gateway","Azure Front Door","HTTP(S)","non-HTTP(S)","Global","Regional","HA"],"title":"Azure Load Balancing options","type":"post"},{"authors":["Sujith Quintelier"],"categories":["Development"],"content":"Sometimes when you run a script, you get this this error like set: Illegal option -:\nRun\nsh filename\rError\n: not found: 2:\r: not found: 4:\rfilename: 6: set: Illegal option -\rThis means there is something wrong with the line endings in your script. This can easily be resolved by running this:\nRun\nsed -i \u0026#39;s/\\r$//\u0026#39; filename\rAfter that rerun your script.\n","date":1651226400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651230851,"objectID":"aa9183d555bc78a9c47ec104d799c5f1","permalink":"/post/wsl-illegal-option/","publishdate":"2022-04-29T10:00:00Z","relpermalink":"/post/wsl-illegal-option/","section":"post","summary":"Illegal option when executing a script","tags":["WSL"],"title":"Illegal option when executing a script","type":"post"},{"authors":["Sujith Quintelier"],"categories":["Development"],"content":"When you are using WSL, once in a while you get this message at start up stating your environment is out of date:\nWelcome to Ubuntu 20.04.4 LTS (GNU/Linux 5.10.102.1-microsoft-standard-WSL2 x86_64)\r* Documentation: https://help.ubuntu.com\r* Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage\rSystem information as of Thu Apr 28 08:26:12 CEST 2022\rSystem load: 0.0 Processes: 8\rUsage of /: 11.0% of 250.98GB Users logged in: 0\rMemory usage: 1% IPv4 address for eth0: 172.31.68.164\rSwap usage: 0%\r0 updates can be applied immediately.\rThe list of available updates is more than a week old.\rTo check for new updates run: sudo apt update\rThis message is shown once a day. To disable it please create the\r/home/\u0026lt;username\u0026gt;/.hushlogin file.\rYou could run this set of commands or this one line to update your WSL\nSet\nsudo apt-get update -y\rsudo apt-get upgrade -y\rsudo apt-get autoremove -y\rsudo apt-get clean -y\rOne line\nsudo apt-get update -y \u0026amp;\u0026amp; sudo apt-get upgrade -y \u0026amp;\u0026amp; sudo apt-get autoremove -y \u0026amp;\u0026amp; sudo apt-get clean -y\rYou can actually create a script wsl-update.sh in the user\u0026rsquo;s root folder and just execute it using sh ~/wsl-update.sh\nUse this script to create wsl-update.sh and make it executable.\ncat \u0026lt;\u0026lt;EOT \u0026gt;\u0026gt; ~/wsl-update.sh\r#!/bin/sh\rsudo apt-get update -y \u0026amp;\u0026amp; sudo apt-get upgrade -y \u0026amp;\u0026amp; sudo apt-get autoremove -y \u0026amp;\u0026amp; sudo apt-get clean -y\rEOT\rchmod +X ~/wsl-update.sh\r","date":1651222800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651230555,"objectID":"a384012cfba56d60e4583cd86a66ccdd","permalink":"/post/wsl-update/","publishdate":"2022-04-29T09:00:00Z","relpermalink":"/post/wsl-update/","section":"post","summary":"Update, Upgrade and Clean WSL","tags":["WSL"],"title":"Update, Upgrade and Clean WSL","type":"post"},{"authors":["Sujith Quintelier"],"categories":["General"],"content":"It has been a while since my last post but I am working on new content. In the beginning it will be just some short notes about things happened in the past week.\n","date":1651136400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651230555,"objectID":"9a4ba3deaa9971b4104b393b99311b7f","permalink":"/post/update/","publishdate":"2022-04-28T09:00:00Z","relpermalink":"/post/update/","section":"post","summary":"Update post","tags":["blog"],"title":"Update post","type":"post"},{"authors":["Sujith Quintelier"],"categories":["Development"],"content":"This guide helps you set up your Blazor development environment without messing up your current development machine with beta releases.\nWe will use these tools\n  Docker Community Edition\n  Visual Studio Code\n  Let\u0026rsquo;s get started Create a local directory with one subdirectory named \u0026ldquo;app\u0026rdquo;.\nCreate Dockerfile First download the latest dockerfile version. Look at the latest version of Linux amd64. Copy the raw content and store it in a file Dockerfile. Modify it by appending  \\ and \u0026amp;\u0026amp; dotnet new -i Microsoft.AspNetCore.Blazor.Templates at the second RUN command.\nIt should look like this:\nRUN curl -SL --output dotnet.tar.gz https://dotnetcli.blob.core.windows.net/dotnet/Sdk/$DOTNET_SDK_VERSION/dotnet-sdk-$DOTNET_SDK_VERSION-linux-x64.tar.gz \\\r \u0026amp;\u0026amp; dotnet_sha512=\u0026#39;2166986e360f1c3456a33723edb80349e6ede115be04a6331bfbfd0f412494684d174a0cfb21d2feb00d509ce342030160a4b5b445e393ad83bedb613a64bc66\u0026#39; \\\r \u0026amp;\u0026amp; sha512sum dotnet.tar.gz \\\r \u0026amp;\u0026amp; echo \u0026#34;$dotnet_sha512dotnet.tar.gz\u0026#34; | sha512sum -c - \\\r \u0026amp;\u0026amp; mkdir -p /usr/share/dotnet \\\r \u0026amp;\u0026amp; tar -zxf dotnet.tar.gz -C /usr/share/dotnet \\\r \u0026amp;\u0026amp; rm dotnet.tar.gz \\\r \u0026amp;\u0026amp; ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet \\\r \u0026amp;\u0026amp; dotnet new -i Microsoft.AspNetCore.Blazor.Templates\rCreate the docker image Open a terminal and go to the location of the Dockerfile and run docker build -t blazor:latest .. This will build the docker image.\nIf this fails, just restart your docker and rerun previous command.\nbuild This builds the image.\n-t This adds a label latest.\nverify The creation of the image can be verified by docker images You should see 2 images. Base image and the one you just created.\nStart a container instance At the prompt run docker run -it --rm --name blazortest -p 8000:80 -v H:\\Euricom\\Blazor\\app\\:/app -w=\u0026quot;/app\u0026quot; blazor:latest\nrun This runs the container:\n-it This runs an interactive container.\n\u0026ndash;rm This removes the container after stopping the container.\n-p This maps the internal port (80) to an external port (8000).\n-v This maps a local path H:\\Euricom\\Blazor\\app\\ to this volume /app\n-w This sets the working directory to /app\nverify In another terminal you should see named instance blazortest\nCreate a new blazor project You can create a new Blazor project the volume created earlier by running this command dotnet new blazor.\nOpen the project file app.csproj and add this node \u0026lt;Watch Include=\u0026quot;**\\*.cshtml\u0026quot; /\u0026gt;. This makes it possible to make changes on the fly.\n\u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk.Web\u0026#34;\u0026gt;\r\u0026lt;PropertyGroup\u0026gt;\r\u0026lt;TargetFramework\u0026gt;netstandard2.0\u0026lt;/TargetFramework\u0026gt;\r\u0026lt;RunCommand\u0026gt;dotnet\u0026lt;/RunCommand\u0026gt;\r\u0026lt;RunArguments\u0026gt;blazor serve\u0026lt;/RunArguments\u0026gt;\r\u0026lt;LangVersion\u0026gt;7.3\u0026lt;/LangVersion\u0026gt;\r\u0026lt;/PropertyGroup\u0026gt;\r\u0026lt;ItemGroup\u0026gt;\r\u0026lt;PackageReference Include=\u0026#34;Microsoft.AspNetCore.Blazor.Browser\u0026#34; Version=\u0026#34;0.4.0\u0026#34; /\u0026gt;\r\u0026lt;PackageReference Include=\u0026#34;Microsoft.AspNetCore.Blazor.Build\u0026#34; Version=\u0026#34;0.4.0\u0026#34; /\u0026gt;\r\u0026lt;DotNetCliToolReference Include=\u0026#34;Microsoft.AspNetCore.Blazor.Cli\u0026#34; Version=\u0026#34;0.4.0\u0026#34; /\u0026gt;\r\u0026lt;Watch Include=\u0026#34;**\\*.cshtml\u0026#34; /\u0026gt;\r\u0026lt;/ItemGroup\u0026gt;\r\u0026lt;/Project\u0026gt;\rStart the application Start the application via dotnet watch run\nLaunch the application Open a browser and launch http://localhost:8000\n","date":1531389600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651227972,"objectID":"dea9e43fb42193f2fe41bd93650a3bb1","permalink":"/post/setupblazordevenv/","publishdate":"2018-07-12T10:00:00Z","relpermalink":"/post/setupblazordevenv/","section":"post","summary":"Setup Blazor development environment","tags":["Blazor","Docker"],"title":"Setup Blazor development environment","type":"post"},{"authors":["Sujith Quintelier"],"categories":["Development"],"content":"Following this note you will be able to Create, Build and Deploy a simple Azure Function App. You create it in Visual Studio. Let it build with Teamcity and deploy it with Octopus Deploy. The needed Azure Resources will also be deployed.\nSetup Tools  Visual Studio 2017 v15.7.4 (VS). TeamCity v2017.2.4 (TC). Octopus Deploy v2018.6.2 (OD).  For this purpose I deployed a Azure VM using this [template] (https://portal.azure.com/#create/octopus.octopusdeployoctopus-deploy), installed an OD Tentacle, a TC Agent and OD cli (in C:\\Programs\\Octo). OD downloads can be found [here] (https://octopus.com/downloads). Also install the correct .NET version via this [link] (https://www.microsoft.com/web/downloads/platform.aspx) and set the DOTNET_HOME environment variable in TC to C:\\Program Files\\dotnet\\\nMake sure you have installed the Azure development workload in VS. Check via TOOLS\\Get Tools and Features\u0026hellip; On Workloads tab check Azure development\nCreate We use VS for developing the Function. Store the project in a source control system supported by TC.\nFunction Add new Project, search for Azure Functions and give it a name. It is a basic http trigger. Nothing fancy. Modify if needed.\nInstall Nuget package Microsoft.NET.Sdk.Functions.\nARM Template Deploying an Azure Function needs 3 Azure Resources:\n Storage Account (Microsoft.Storage/storageAccounts) Hosting Plan (Microsoft.Web/serverfarms) Function App (Microsoft.Web/sites)  Below you will find a basic ARM Template with these 3 resources and a parameters Template. Set Copy to Output Directory to Copy if Newer. Add those templates to your project and name them azuredeploy.json and azuredeploy.parameters.json.\nThe project structure should look like\nTemplate {\r\u0026#34;$schema\u0026#34;: \u0026#34;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\u0026#34;,\r\u0026#34;contentVersion\u0026#34;: \u0026#34;1.0.0.0\u0026#34;,\r\u0026#34;parameters\u0026#34;: {\r\u0026#34;appName\u0026#34;: {\r\u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,\r\u0026#34;metadata\u0026#34;: {\r\u0026#34;description\u0026#34;: \u0026#34;The name of the function app that you wish to create.\u0026#34;\r}\r},\r\u0026#34;sku\u0026#34;: {\r\u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,\r\u0026#34;allowedValues\u0026#34;: [\r\u0026#34;Free\u0026#34;,\r\u0026#34;Shared\u0026#34;,\r\u0026#34;Basic\u0026#34;,\r\u0026#34;Standard\u0026#34;\r],\r\u0026#34;defaultValue\u0026#34;: \u0026#34;Standard\u0026#34;,\r\u0026#34;metadata\u0026#34;: {\r\u0026#34;description\u0026#34;: \u0026#34;The pricing tier for the hosting plan.\u0026#34;\r}\r},\r\u0026#34;workerSize\u0026#34;: {\r\u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,\r\u0026#34;allowedValues\u0026#34;: [\r\u0026#34;0\u0026#34;,\r\u0026#34;1\u0026#34;,\r\u0026#34;2\u0026#34;\r],\r\u0026#34;defaultValue\u0026#34;: \u0026#34;0\u0026#34;,\r\u0026#34;metadata\u0026#34;: {\r\u0026#34;description\u0026#34;: \u0026#34;The instance size of the hosting plan (small, medium, or large).\u0026#34;\r}\r},\r\u0026#34;storageAccountType\u0026#34;: {\r\u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,\r\u0026#34;defaultValue\u0026#34;: \u0026#34;Standard_LRS\u0026#34;,\r\u0026#34;allowedValues\u0026#34;: [\r\u0026#34;Standard_LRS\u0026#34;,\r\u0026#34;Standard_GRS\u0026#34;,\r\u0026#34;Standard_RAGRS\u0026#34;\r],\r\u0026#34;metadata\u0026#34;: {\r\u0026#34;description\u0026#34;: \u0026#34;Storage Account type\u0026#34;\r}\r},\r\u0026#34;location\u0026#34;: {\r\u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,\r\u0026#34;defaultValue\u0026#34;: \u0026#34;[resourceGroup().location]\u0026#34;,\r\u0026#34;metadata\u0026#34;: {\r\u0026#34;description\u0026#34;: \u0026#34;Location for all resources.\u0026#34;\r}\r}\r},\r\u0026#34;variables\u0026#34;: {\r\u0026#34;functionAppName\u0026#34;: \u0026#34;[parameters(\u0026#39;appName\u0026#39;)]\u0026#34;,\r\u0026#34;hostingPlanName\u0026#34;: \u0026#34;[parameters(\u0026#39;appName\u0026#39;)]\u0026#34;,\r\u0026#34;storageAccountName\u0026#34;: \u0026#34;[concat(uniquestring(resourceGroup().id), \u0026#39;functions\u0026#39;)]\u0026#34;\r},\r\u0026#34;resources\u0026#34;: [\r{\r\u0026#34;type\u0026#34;: \u0026#34;Microsoft.Storage/storageAccounts\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;[variables(\u0026#39;storageAccountName\u0026#39;)]\u0026#34;,\r\u0026#34;apiVersion\u0026#34;: \u0026#34;2016-12-01\u0026#34;,\r\u0026#34;location\u0026#34;: \u0026#34;[parameters(\u0026#39;location\u0026#39;)]\u0026#34;,\r\u0026#34;kind\u0026#34;: \u0026#34;Storage\u0026#34;,\r\u0026#34;sku\u0026#34;: {\r\u0026#34;name\u0026#34;: \u0026#34;[parameters(\u0026#39;storageAccountType\u0026#39;)]\u0026#34;\r}\r},\r{\r\u0026#34;type\u0026#34;: \u0026#34;Microsoft.Web/serverfarms\u0026#34;,\r\u0026#34;apiVersion\u0026#34;: \u0026#34;2015-04-01\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;[variables(\u0026#39;hostingPlanName\u0026#39;)]\u0026#34;,\r\u0026#34;location\u0026#34;: \u0026#34;[parameters(\u0026#39;location\u0026#39;)]\u0026#34;,\r\u0026#34;properties\u0026#34;: {\r\u0026#34;name\u0026#34;: \u0026#34;[variables(\u0026#39;hostingPlanName\u0026#39;)]\u0026#34;,\r\u0026#34;sku\u0026#34;: \u0026#34;[parameters(\u0026#39;sku\u0026#39;)]\u0026#34;,\r\u0026#34;workerSize\u0026#34;: \u0026#34;[parameters(\u0026#39;workerSize\u0026#39;)]\u0026#34;,\r\u0026#34;hostingEnvironment\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;numberOfWorkers\u0026#34;: 1\r}\r},\r{\r\u0026#34;apiVersion\u0026#34;: \u0026#34;2015-04-01\u0026#34;,\r\u0026#34;type\u0026#34;: \u0026#34;Microsoft.Web/sites\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;[variables(\u0026#39;functionAppName\u0026#39;)]\u0026#34;,\r\u0026#34;location\u0026#34;: \u0026#34;[parameters(\u0026#39;location\u0026#39;)]\u0026#34;,\r\u0026#34;kind\u0026#34;: \u0026#34;functionapp\u0026#34;,\r\u0026#34;properties\u0026#34;: {\r\u0026#34;name\u0026#34;: \u0026#34;[variables(\u0026#39;functionAppName\u0026#39;)]\u0026#34;,\r\u0026#34;serverFarmId\u0026#34;: \u0026#34;[resourceId(\u0026#39;Microsoft.Web/serverfarms\u0026#39;, variables(\u0026#39;hostingPlanName\u0026#39;))]\u0026#34;,\r\u0026#34;hostingEnvironment\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;clientAffinityEnabled\u0026#34;: false,\r\u0026#34;siteConfig\u0026#34;: {\r\u0026#34;alwaysOn\u0026#34;: true\r}\r},\r\u0026#34;dependsOn\u0026#34;: [\r\u0026#34;[resourceId(\u0026#39;Microsoft.Web/serverfarms\u0026#39;, variables(\u0026#39;hostingPlanName\u0026#39;))]\u0026#34;,\r\u0026#34;[resourceId(\u0026#39;Microsoft.Storage/storageAccounts\u0026#39;, variables(\u0026#39;storageAccountName\u0026#39;))]\u0026#34;\r],\r\u0026#34;resources\u0026#34;: [\r{\r\u0026#34;apiVersion\u0026#34;: \u0026#34;2016-03-01\u0026#34;,\r\u0026#34;name\u0026#34;: \u0026#34;appsettings\u0026#34;,\r\u0026#34;type\u0026#34;: \u0026#34;config\u0026#34;,\r\u0026#34;dependsOn\u0026#34;: [\r\u0026#34;[resourceId(\u0026#39;Microsoft.Web/sites\u0026#39;, variables(\u0026#39;functionAppName\u0026#39;))]\u0026#34;,\r\u0026#34;[resourceId(\u0026#39;Microsoft.Storage/storageAccounts\u0026#39;, variables(\u0026#39;storageAccountName\u0026#39;))]\u0026#34;\r],\r\u0026#34;properties\u0026#34;: {\r\u0026#34;AzureWebJobsStorage\u0026#34;: \u0026#34;[concat(\u0026#39;DefaultEndpointsProtocol=https;AccountName=\u0026#39;,variables(\u0026#39;storageAccountName\u0026#39;),\u0026#39;; AccountKey=\u0026#39;,listkeys(resourceId(\u0026#39;Microsoft.Storage/storageAccounts\u0026#39;, variables(\u0026#39;storageAccountName\u0026#39;)), \u0026#39;2015-05-01-preview\u0026#39;).key1,\u0026#39;;\u0026#39;)]\u0026#34;,\r\u0026#34;AzureWebJobsDashboard\u0026#34;: \u0026#34;[concat(\u0026#39;DefaultEndpointsProtocol=https;AccountName=\u0026#39;,variables(\u0026#39;storageAccountName\u0026#39;),\u0026#39;; AccountKey=\u0026#39;,listkeys(resourceId(\u0026#39;Microsoft.Storage/storageAccounts\u0026#39;, variables(\u0026#39;storageAccountName\u0026#39;)), \u0026#39;2015-05-01-preview\u0026#39;).key1,\u0026#39;;\u0026#39;)]\u0026#34;,\r\u0026#34;FUNCTIONS_EXTENSION_VERSION\u0026#34;: \u0026#34;~1\u0026#34;\r}\r}\r]\r}\r]\r}\rParameters {\r\u0026#34;$schema\u0026#34;: \u0026#34;https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#\u0026#34;,\r\u0026#34;contentVersion\u0026#34;: \u0026#34;1.0.0.0\u0026#34;,\r\u0026#34;parameters\u0026#34;: {\r\u0026#34;appName\u0026#34;: {\r\u0026#34;value\u0026#34;: \u0026#34;#{AzureFunctionName}\u0026#34;\r}\r}\r}\rBuild In TC Create a new project, add a new Build Configuration with 3 Build Steps.\nParameters These are use in TC in scripts, variable names, \u0026hellip;\n apikey (generated in OD) packageId (tc-od) server (url to OD) version (semantic version nr like 1.0.%build.number%)  publish This runner type is .NET CLI (dotnet). Give a Step name. Choose publish as Command. Select the project. Set Configuration and Output directory to bin\\Release\\PublishOutput pack This runner type is Command Line. Give a Step name. Choose Custom script and enter script below.\ncd tc-od\\bin\\Release\\PublishOutput\rC:\\Programs\\Octo\\octopack --id=%packageId% --format=zip --outFolder=../dist --version=%version%\r push This runner type is Command Line. Give a Step name. Choose Custom script and enter script below.\nThis pushed the zip file to OD.\ncd tc-od\\bin\\Release\\dist\rC:\\Programs\\Octo\\octopush --server=%server% --apiKey=%apikey% --package=%packageId%.%version%.zip\r Deploy In OD make sure you have setup\n an Environment a Deployment target(in our case a Azure Web App) a Lifecycle with automatic deploy after release creation an Azure Subscription (this is needed to deploy)  Add a project.\nUnder Process add 2 steps:\n Deploy Resources Deploy Function  Deploy Resources In this step we deploy the ARM template.\nSearch for resource Group and select Deploy an Azure resource Group.\n Set Step Name Select Execution Plan Select an Azure Account and Resource Group Select File inside a package Select Package Set Paths  Deploy Function In this step we deploy the Function.\nSearch for azure web and select Deploy an Azure Web App.\n Set Step Name Select Package  This is it. Happy coding!\nResources  https://octopus.com/blog/azure-functions  ","date":1529661600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651227972,"objectID":"b175cbb0c2581f30cd881e48283cbe33","permalink":"/post/createbuildazfvstcod/","publishdate":"2018-06-22T10:00:00Z","relpermalink":"/post/createbuildazfvstcod/","section":"post","summary":"Create, build and deploy Azure Functions with Visual Studio, Teamcity and Octopus Deploy","tags":["Azure Function","Visual Studio","Teamcity","Octopus Deploy","Azure"],"title":"Create, build and deploy Azure Functions with Visual Studio, Teamcity and Octopus Deploy","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575544489,"objectID":"6d99026b9e19e4fa43d5aadf147c7176","permalink":"/contact/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/contact/","section":"","summary":"","tags":null,"title":"","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575544489,"objectID":"fd36605688ef45e10dc233c860158012","permalink":"/cv/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/cv/","section":"","summary":"","tags":null,"title":"","type":"widget_page"}]